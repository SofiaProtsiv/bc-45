"use strict";
/*
 * –ö–æ–ª–±–µ–∫–∏, —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
 */

// const foo1 = function (callback) {
//   console.log(callback);
//   console.log(foo2);
//   // console.log(foo2 === callback);
//   callback();
// };
// const foo2 = function () {
//   console.log(`Hello!`);
// };

// // console.log(foo2);

// foo1(foo2);

// //? –ó–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
// const fetchUser = async function (userUrl, callback) {
//   const response = await fetch(`https://api.github.com/users/${userUrl}`);
//   const result = await response.json();
//   //   console.log(callback === showInfoAboutUser);
//   callback(result);
// };

// const showInfoAboutUser = function ({ name, bio, avatar_url, repos_url }) {
//   //   console.log("showInfoAboutUser", user);

//   return document.body.insertAdjacentHTML(
//     "afterbegin",
//     `<div>
//           <img width='150' height='150' src="${avatar_url}" />
//           <h3>${name}</h3>
//           <p>${bio}</p>
//           <a href="${repos_url}">My github</a>
//       </div>`
//   );
// };

// fetchUser("SofiaProtsiv", showInfoAboutUser);

//? –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ–¥—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
// const button = document.querySelector("button");

// // const sayHello = function () {
// //   console.log("Hello!");
// // };

// // button.addEventListener("click", sayHello);

// button.addEventListener("click", function (e) {
//   console.log("Hello!");
// });

/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), 
? —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, 
? —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.
? –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, 
? –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–±–µ–∫–∞.
*/

// const each = function (array, callback) {
//   const arr = [];

//   for (const el of array) {
//     arr.push(callback(el));
//   }

//   return arr;
// };

// const multi = function (el) {
//   return el * 2;
// };

// const add = function (el) {
//   return el + 5;
// };

// const numbers = [1, 2, 3, 4, 5];

// console.log("MULTI", each(numbers, multi));
// console.log("SUM", each(numbers, add));

/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ç–∞–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
? createProduct(product, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ ID, 
? –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, 
? –¥–æ–¥–∞—é—á–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —ñ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫ 
? –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
? logProduct(product) - –∫–æ–ª–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É 
? —ñ –ª–æ–≥—ñ—é—î –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
? logTotalPrice(product) - –∫–æ–ª–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É 
? —ñ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É.
*/

const createProduct = function (product, callback1, callback2) {
  //   console.log(product);

  const updatedProduct = {
    ...product,
    id: new Date(),
  };
  //   Object.assign(product, {   id: new Date()})

  //   console.log(first);
  //   callback1 && callback1(updatedProduct);

  if (callback1) {
    callback1(updatedProduct);
  }
  if (callback2) {
    callback2(updatedProduct);
  }
};

const logProduct = function (product1) {
  console.log(product1);
};

const logTotalPrice = function ({ price, quantity } = {}) {
  console.log(`Total price: ${price * quantity}`);
};

createProduct({ name: "üçé", price: 30, quantity: 3 }, null, logProduct);
createProduct({ name: "üçã", price: 20, quantity: 5 }, null, logProduct);
createProduct({ name: "üçé", price: 30, quantity: 3 }, logProduct);
createProduct({ name: "üçã", price: 20, quantity: 5 }, logProduct);
createProduct({ name: "üçã", price: 20, quantity: 5 }, logTotalPrice);

/*
? –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç—É  account  –º–µ—Ç–æ–¥–∏ –¥–ª—è
? withdraw(amount, onSuccess, onError)
? —ñ deposit(amount, onSuccess, onError),
? –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó,
? –∞ –¥—Ä—É–≥–∏–π —ñ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–±–µ–∫–∏.
?
? –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î:
? onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`)
? —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT
? onError(`Amount can't exceed account balance of ${this.balance} credits`)
? —è–∫—â–æ amount –±—ñ–ª—å—à–µ this.balance
? onError(`Amount can't exceed account balance of ${this.balance} credits`)
? —ñ–Ω–∞–∫—à–µ –∑–Ω—ñ–º–∞—î–º–æ –≥—Ä–æ—à—ñ –∑ –±–∞–ª–∞–Ω—Å—É —ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ
? onSuccess(`Account balance: ${this.balance}`)
?
? –ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î:
? onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`)
? —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT
? onError(`Amount must be more than 0 credits`) —è–∫—â–æ
? amount –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é
? —ñ–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ –¥–æ –±–∞–ª–∞–Ω—Å—É amount —ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ
? onSuccess(`Account balance: ${this.balance}`)
*/

// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: 'Jacob',
//   balance: 400,

//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//     } else if (amount > this.balance) {
//       onError(`Amount can't exceed account balance of ${this.balance} credits`);
//     } else {
//       this.balance -= amount;
//       onSuccess(`Account balance: ${this.balance}`);
//     }
//   },

//   deposit(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//     } else if (amount <= 0) {
//       onError(`Amount must be more than 0 credits`);
//     } else {
//       this.balance += amount;
//       onSuccess(`Account balance: ${this.balance}`);
//     }
//   },
// };

// const handleSuccess = function (message) {
//   console.log(`‚úÖ Success! ${message}`);
// };

// const handleError = function (message) {
//   console.log(`‚ùå Error! ${message}`);
// };

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);

// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);
