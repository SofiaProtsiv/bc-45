"use strict";
/*
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –≤–∏—Å–ª–æ–≤–ª—é–≤–∞–Ω–Ω—è —Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó.
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏, –∞—Ä–≥—É–º–µ–Ω—Ç–∏, –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è, –ø–æ—Ä—è–¥–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É.
 */

// console.log(showMessage("Hello", "Sofia"));
// // function declaration
// function showMessage() {
//   return Array.from(arguments);
// }
//  //agrument

// function expresion // rest
// const showMessage = function (...args) {
//   console.log(args);
// };

// // function expresion // arguments
// const showMessage = function () {
//     console.log(arguments);
//   };
// showMessage("Hello", "Sofia");
//
//
// –ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É
// console.log("Before func");

// function consoleMessage(message = "Default message", num = 5, start = 0) {
//   console.log(start);
//   for (let i = start; i < num; i++) {
//     console.log(message + i);
//   }
// }
// console.log("–î–æ –≤–∏–∫–ª–∏–∫–∞ consoleMessage");
// consoleMessage("Hello world", 3);
// console.log("–ü—ñ—Å–ª—è –≤–∏–∫–ª–∏–∫–∞ consoleMessage");

// consoleMessage("I like Java Script!!");
// consoleMessage("Java Script!!");

// const showMessage = function () {
//   console.log('Hello');
// };

// showMessage();

// function showMessage() {
//   console.log('Hello');
// }

// showMessage();

// function showMessage(username = "Some ures") {
//   console.log(`Hello ${username}!`);
// }

// showMessage("Josie Pierce");
// showMessage("Vera Knight");
// showMessage("Alan Lamb");

/*
? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é add(a, b), —è–∫–∞ —Å—É–º—É—î 2 —á–∏—Å–ª–∞ —ñ —Ä–æ–±–∏—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, 
? —è–∫—â–æ —Å—É–º–∞ —á–∏—Å–µ–ª –º–µ–Ω—à–µ 100 –≤–∏–≤–æ–¥–∏–º–æ "–†–µ–∑—É–ª—å—Ç–∞—Ç –º–µ–Ω—à–µ 100"
? —ñ–Ω–∞–∫—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—É–º—É —á–∏—Å–µ–ª
*/

// function add(number1, number2 = 1) {
//   let result = 0;
//   if (number1 && number2) {
//     result = Number(number1 + number2);
//     if (result < 100) {
//       return "–†–µ–∑—É–ª—å—Ç–∞—Ç –º–µ–Ω—à–µ 100";
//     }
//   }
//   return result;
// }

// console.log(add(100));

/*
? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calcBMI(weight, height) —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î 
? —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏.
? –î–ª—è —Ü—å–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –∑—Ä–æ—Å—Ç—É –ª—é–¥–∏–Ω–∏.
? –í–∞–≥–∞ —Ç–∞ –≤–∏—Å–æ—Ç–∞ –±—É–¥—É—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —è–∫ —Ä—è–¥–∫–∏. 
? –ù–µ—Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ 24.7 –∞–±–æ 24,7,
? —Ç–æ–±—Ç–æ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–º–∞.
? –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –æ–¥–Ω—ñ—î—ó —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏;
*/

// function calcBMI(weight, height) {
//   const numberWeight = Number.parseFloat(weight.replace(",", "."));
//   const numberHeight = Number.parseFloat(height.replace(",", "."));

//   const BMI = numberWeight / Math.pow(numberHeight, 2);
//   return Number.parseFloat(BMI.toFixed(1));
// }
// const mangoBMI = calcBMI("88,3", "1.75");
// console.log(mangoBMI);
// const pollyBMI = calcBMI("80,3", "1.95");
// console.log(pollyBMI);

/*
 * –ü–∞—Ç–µ—Ä–Ω —Ä–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.
 */

/*
? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é min(a,b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a —Ç–∞ b.
*/

// function min(a, b) {
//   if (typeof a !== "number" || typeof b !== "number") {
//     return "–û–¥–∏–Ω —ñ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –Ω–µ —á–∏—Å–ª–æ";
//   }
// 1
//   if (a < b) {
//     return a;
//   } else {
//     return b;
//   }
// 2
//   if (a < b) {
//     return a;
//   }
//   return b;
// 3
//   return a < b ? a : b;
// 4
//   return a < b && a;
// }

// console.log(min(2, "5")); // 2
// console.log(min(3, -1)); // -1
// console.log(min(5, 8)); // 1

/*
? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏,
? –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dimensions —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞.
? –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.
*/

// function getRectArea(dimensions) {
//   const numbers = dimensions.split(" ");
//   //1
//   //   const rectArea = Number(numbers[0] * numbers[1]);

//   //2
//   let rectArea = 1;
//   for (const number of numbers) {
//     rectArea *= Number(number);
//   }
//   return rectArea;
// }

// console.log(getRectArea("8 11")); // 88
// console.log(getRectArea("18 11")); // 198
// console.log(getRectArea("8 21")); // 168

/*
? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª for,
? —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–æ–¥–∏—Ç–∏–º–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
? —É —Ñ–æ—Ä–º–∞—Ç—ñ <–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞> - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –ø–µ—Ä—à–æ–≥–æ.
? –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É ['Mango', 'Poly', 'Ajax'] –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ 1 - Mango,
? –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 –≤–∏–≤–µ–¥–µ 3 ‚Äì Ajax.
*/

// function logItems(items) {
//   for (let i = 0; i < items.length; i++) {
//     console.log(`${i + 1}: ${items[i]}`);
//   }
// }

// logItems(["Mango", "Poly", "Ajax"]);
// logItems(["üçé", "üçá", "üçë", "üçå", "üçã"]);

/*
 * Scope
 */

// let total = 100;
// let count = 100;

// const str = "Global scope";

// addNumbers(
//   "d",
//   "a",
//   "g",
//   1,
//   2,
//   6,
//   4,
//   7,
//   8,
//   9,
//   5,
//   1,
//   5,
//   14,
//   15,
//   48,
//   79,
//   "d",
//   "a",
//   "g"
// );

// function addNumbers() {
//   const str = "Local scope";

//   let total = 0;
//   let count = 0;

//   for (const numbr of arguments) {
//     if (typeof numbr !== "number") {
//       continue;
//     }

//     total += numbr;
//     count += 1;
//   }
//   console.log(total / count);
// }

/*
 * –ü–æ—Ä—è–¥–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É
 */

// function task1() {
//   console.log("before task 2");
//   task2();
//   console.log("after task 2");
//   console.log("Completed task 1");
// }
// function task2() {
//   console.log("before task 3");
//   task3();
//   console.log("after task 3");
//   console.log("Completed task 2");
// }
// function task3() {
//   console.log("Completed task 3");
// }
// console.log("before task 1");
// task1();
// console.log("after task 1");
//
//
// example 2
// function foo() {
//   console.log("foo - start");
//   console.log("foo - 1");
//   baz();
//   console.log("Code back 232");
//   bar();
//   console.log("Code back 234");
//   console.log("foo- end");
// }
// function baz() {
//   console.log("baz - start");
//   console.log("baz - 2");
//   console.log("baz - end");
// }
// function bar() {
//   console.log("bar - start");
//   console.log("bar-3");
//   console.log("bar - end");
// }
// foo();

/*
? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é printContactsInfo(names, phones) —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
? –£ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ names —ñ phones –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏.
? –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å.
? –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.
*/

// function printContactsInfo(names, phones) {
//   const namesArr = names.split(",");
//   const phonesArr = phones.split(",");
//   for (let i = 0; i < phonesArr.length; i += 1) {
//     console.log(`${namesArr[i]}: ${phonesArr[i]}`);
//   }
// }

// printContactsInfo(
//   "Jacob,William,Solomon,Artemis",
//   "89001234567,89001112233,890055566377,890055566300"
// );

// printContactsInfo(
//   "Vera,Carr,Violet,Sherman",
//   "89001234567,89001112233,890055566377,890055566300"
// );

/*
? –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLargestNumber(numbers), —è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.
*/

// function findLargestNumber(numbers) {
//   let largestNumber = numbers[0];

//   for (const number of numbers) {
//     // if (number > largestNumber) {
//     //   largestNumber = number;
//     // }
//     // if (number < largestNumber) {
//     //   continue;
//     // }
//     // largestNumber = number;
//     largestNumber = number > largestNumber ? number : largestNumber;
//   }
//   return largestNumber;
// }

// console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
// console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83

/*
 * –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ arguments
 */
/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calcAverage() —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ 
? —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è.
? –£—Å—ñ –∞—Ä—É–≥–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å –ª–∏—à–µ —á–∏—Å–ª–∞–º–∏.
*/
// function calcAverage(...numbers) {
//   let totalSum = 0;

//   for (const number of numbers) {
//     totalSum += number;
//   }
//   return totalSum / numbers.length;
// }

// console.log(calcAverage(1, 2, 3, 4)); // 2.5
// console.log(calcAverage(14, 8, 2)); // 8
// console.log(calcAverage(27, 43, 2, 8, 36)); // 23.2

/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ courses:
? addCourse(name) - –¥–æ–¥–∞—î –∫—É—Ä—Å –¥–æ –∫—ñ–Ω—Ü—è –∫–æ–ª–µ–∫—Ü—ñ—ó
? removeCourse(name) - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
? updateCourse(oldName, newName) ‚Äì –∑–º—ñ–Ω—é—î —ñ–º'—è –Ω–∞ –Ω–æ–≤–µ
*/
const courses = ["HTML", "CSS", "JavaScript", "React", "PostgreSQL"];

function getCourses(data) {
  //   console.table(data);
  return data;
}
function addCourse(course) {
  if (!course) {
    return;
  }
  const coursesArr = getCourses(courses);
  coursesArr.push(course);
}

function removeCourse(name) {
  const coursesArr = getCourses(courses);
  const courseToRemove = coursesArr.indexOf(name);

  if (courseToRemove !== -1) {
    coursesArr.splice(courseToRemove, 1);
  }

  return coursesArr;
}
function updateCourse(oldName, newName) {
  const coursesArr = getCourses(courses);
  const courseToUpdate = coursesArr.indexOf(oldName);
  coursesArr.splice(courseToUpdate, 1, newName);

  return coursesArr;
}

addCourse("Express");
addCourse("React");
removeCourse("CSS");
removeCourse("Linux");
updateCourse("HTML", "Vue");
updateCourse("Linux", "Windows");

console.table(getCourses(courses));
