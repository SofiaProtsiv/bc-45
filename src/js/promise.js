/*
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º—ñ—Å—É
 * - –ö–ª–∞—Å Promise
 * - resolve
 * - reject
 * - Promise.prototype.then(onResolve, onReject)
 * - –õ–∞–Ω—Ü—é–∂–∫–∏ –ø—Ä–æ–º—ñ—Å—ñ–≤ (chaining)
 * - Promise.prototype.catch(error)
 * - Promise.prototype.finally()
 * - Marco and micro tasks
 */

// üìå‚ùóÔ∏èü§ì –©–æ –≤–∏–≤–µ–¥–µ –≤ –∫–æ–Ω—Å–æ–ª—å?

// setTimeout(() => {
//   console.log('setTimeout');
// }, 0);

// console.log('console.log: 1');

// Promise.resolve()
//   .then(() => {
//     console.log('promise: 1');
//   })
//   .then(() => {
//     console.log('promise: 2');
//   });

// console.log('console.log: 2');

// ‚ùóÔ∏èü§ìüìå K–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä new Promise(callback(resolve, reject));

// const isSuccess = true;

// const promise = new Promise((resolve, reject) => {
//   setTimeout(() => {
//     if (isSuccess) {
//       resolve('Success!');
//     } else {
//       reject('Error!');
//     }
//   }, 2000);
// });

// // // Will run first
// console.log('Before promise.then()');

// // // Registering promise callbacks
// promise
//   .then(
//     // onResolve will run third or not at all
//     value => {
//       console.log('onResolve call inside promise.then()');
//       console.log(value); // "Success! Value passed to resolve function"
//     },
//     // onReject will run third or not at all
//     error => {
//       console.log('onReject call inside promise.then()');
//       console.log(error); // "Error! Error passed to reject function"
//     }
//   )
//   .catch(error => {
//     console.log(error);
//   })
//   .finally(() => {
//     console.log('The end');
//   });

// // Will run second
// console.log('After promise.then()');

// ‚ùóÔ∏èü§ìüìå Example 2

// const promise = new Promise((resolve, reject) => {
//   const isDone = Math.random();

//   setTimeout(() => {
//     if (isDone < 0.5) {
//       resolve('Done');
//     } else {
//       reject('Error');
//     }
//   }, 1500);
// });

// // promise.then(console.log).catch(console.log);

// promise
//   .then(value => {
//     console.log(value);
//   })
//   .catch(error => console.log(error))
//   .finally(() => {
//     console.log('The end!');
//   });

// ‚ùóÔ∏èü§ìüìå Example 3, –ª–∞–Ω—Ü—é–∂–æ–∫ –ø—Ä–æ–º—ñ—Å—ñ–≤

// const promise = new Promise((resolve, reject) => {
//   const isDone = Math.random();

//   console.log('Start');

//   setTimeout(() => {
//     if (isDone < 0.5) {
//       resolve('Done');
//     } else {
//       reject('Error');
//     }
//   }, 1000);
// });

// promise
//   .then(data => {
//     console.log(data);
//     data += '!';
//     return data;
//   })
//   .then(str => {
//     console.log(str);
//     str += '!!';
//     return str;
//   })
//   .then(someStr => {
//     console.log(someStr);
//   })
//   .catch(err => {
//     console.log(err);
//   })
//   .finally(() => {
//     console.log('The end');
//   });


//? TASK 01
// –©–æ –±—É–¥–µ —É –∫–æ–Ω—Å–æ–ª—ñ

// const promise = new Promise((resolve, reject) => {
//   resolve('1');
// });

// promise
//   .then(data => {
//     console.log(data);
//   })
//   .then(data => {
//     console.log(data);
//     if (!data) {
//       throw new Error('Error in then!');
//     }
//     return '2';
//   })
//   .then(data => {
//     console.log(data); 
//   })
//   .catch(error => {
//     console.log(error);
//   });

//? TASK 02
// –©–æ –±—É–¥–µ —É –∫–æ–Ω—Å–æ–ª—ñ

// const promise = new Promise((resolve, reject) => {
//   reject('error');
// });

// promise
//   .then(data => {
//     console.log(data);
//   })
//   .then(data => {
//     console.log(data);
//     return '2';
//   })
//   .then(data => {
//     console.log(data);
//   })
//   .catch(error => {
//     console.log(error);
//   });

/*
 * –Ñ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≥–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤—ñ —á–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ 4.
 * –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–º—ñ—Å.
 * –ó—Ä–æ–±–∏—Ç–∏ —Ç–∞–∫, —â–æ–± –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ —á–∏—Å–ª–æ –±—É–ª–æ —ñ–∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó setTimeout –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
 * –û–±–µ—Ä–Ω—É—Ç–∏ –≤—Å–µ —Ü–µ –≤ –ø—Ä–æ–º—ñ—Å, —è–∫–∏–π —É –±—É–¥—å-—è–∫–æ–º—É —Ä–∞–∑—ñ –ø–æ–≤–µ—Ä—Ç–∞—î —á–∞—Å –∑–∞—Ç—Ä–∏–º–∫–∏ (—ñ –≤ resolve, —ñ –≤ reject).
 * –ù–µ—Ö–∞–π –ø—Ä–æ–º—ñ—Å –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–æ, —è–∫—â–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ 1 –∞–±–æ 2 (`‚úÖ Resolved after ${delay} sec`), —ñ –∑ –ø–æ–º–∏–ª–∫–æ—é - —è–∫—â–æ 3 –∞–±–æ 4 (`‚ùå Rejected after ${delay} sec`).
 */

const getRandomNumber = () => Math.floor(Math.random() * 4) + 1;

const makePromise = () => {
  return new Promise((resolve, rejected) => {
    const delay = getRandomNumber();

    setTimeout(() => {
      if (delay <= 2) {
        resolve(delay);
      }
      rejected(delay);
    }, delay * 1000);
  });
};

const onSuccess = delay => console.log(`‚úÖ Resolved after ${delay} sec`);
const onError = delay => console.error(`‚ùå Rejected after ${delay} sec`);
makePromise().then(onSuccess).catch(onError);