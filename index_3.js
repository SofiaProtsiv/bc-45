/*
 * forEach() —è–∫ –∑–∞–º—ñ–Ω–∞ —Ü–∏–∫–ª—ñ–≤ for —ñ for...of –¥–ª—è –º–∞—Å–∏–≤—ñ–≤
 */

// const numbers = [1, 2, 3, 4, 5];

// const ownForEach = function (array, callback) {
//   for (let i = 0; i < array.length; i += 1) {
//     callback(array[i], i, array);
//   }
// };
// ownForEach(numbers, (el, idx, arr) => {
//   console.log(el);
//   console.log(idx);
//   console.log(arr);
// });

// numbers.forEach((el, idx, arr) => {
//   console.log("el", el);
//   console.log("idx", idx);
//   console.log("arr", arr);
// });

// const numbers = [1, 2, 3, 4, 5];

// const getTotal = function (numbersArr) {
//   let total = 0;
//   // –ß–µ—Ä–µ–∑ –∑–≤–∏—á–∞–π–Ω–∏–π for
//   for (let i = 0; i < numbersArr.length; i++) {
//     total += numbersArr[i];
//     if (i === 2) {
//       return total;
//     }
//   }

// –ß–µ—Ä–µ–∑ –∑–≤–∏—á–∞–π–Ω–∏–π for...of
// for (const number of numbersArr) {
//     total += number;
// }

// –ß–µ—Ä–µ–∑ forEach();
//   numbersArr.forEach((number) => (total += number));

//   return total;
// };

// console.log(getTotal(numbers));

/*
? –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach 
? —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
*/

// function logItems(items) {
//   // for (let i = 0; i < items.length; i += 1) {
//   //   console.log(`${i + 1} - ${items[i]}`);
//   // }

// //   items.forEach((item, idx) => {
// //     console.log(`${idx + 1} - ${item}`);
// //   });
// }

// logItems(["Mango", "Poly", "Ajax"]);
// logItems(["üçé", "üçá", "üçë", "üçå", "üçã"]);

/*
? –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach 
? —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
*/

// function printContactsInfo({ names, phones } = {}) {
//   const nameList = names.split(",");
//   const phoneList = phones.split(",");

//   //   for (let i = 0; i < phoneList.length; i += 1) {
//   //     console.log(`${nameList[i]}: ${phoneList[i]}`);
//   //   }

//   nameList.forEach((element, index) =>
//     console.log(`${element}: ${phoneList[index]}`)
//   );
// }

// printContactsInfo({
//   names: "Jacob,William,Solomon,Artemis",
//   phones: "89001234567,89001112233,890055566377,890055566300",
// });

/*
? –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach 
? —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
*/

// function cal—ÅulateAverage(...args) {
//   let total = 0;

//   // for (let i = 0; i < args.length; i++) {
//   //   total += args[i];
//   // }

//   args.forEach((arg) => (total += arg));

//   return total / args.length;
// }

// console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
// console.log(cal—ÅulateAverage(14, 8, 2)); // 8
// console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2

// Count vowel

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –ø—ñ–¥ –Ω–∞–∑–≤–æ—é `vowelCount`,
// —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Ä—è–¥–æ–∫ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±‚Äô—î–∫—Ç —ñ–∑
// –∫–ª—é—á–∞–º–∏ —è–∫ –≥–æ–ª–æ—Å–Ω–æ—é —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ —è–∫ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑—ñ–≤,
//–∫–æ–ª–∏ –≥–æ–ª–æ—Å–Ω–∞ –∑‚Äô—è–≤–ª—è—î—Ç—å—Å—è –≤ —Ä—è–¥–∫—É.
// –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –º–∞—î –±—É—Ç–∏ –Ω–µ—á—É—Ç–ª–∏–≤–æ—é –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É,
// —Ç–æ–º—É –º–∞—é—Ç—å –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—è –º–∞–ª—ñ —Ç–∞ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏

function vowelCount(str) {
  const normilizedStrArr = str.toLowerCase().split("");
  const vowels = "aeiou";
  const obj = {};

  //   normilizedStrArr.forEach((letter) => {
  //     // console.log([...vowels]);
  //     // console.log(Array.from(vowels));
  //     // console.log(vowels.split(""));

  //     vowels.split("").forEach((vowel) => {
  //       if (letter.includes(vowel)) {
  //         obj[letter] ? (obj[letter] += 1) : (obj[letter] = 1);
  //       }
  //       //   if (letter === vowel) {
  //       //     obj[letter] ? (obj[letter] += 1) : (obj[letter] = 1);
  //       //   }
  //     });
  //   }

  normilizedStrArr.forEach((letter) => {
    if (vowels.includes(letter)) {
      //   if (obj[letter]) {
      //     obj[letter] += 1;
      //   } else {
      //     obj[letter] = 1;
      //   }

      obj[letter] ? (obj[letter] += 1) : (obj[letter] = 1);
    }
  });

  return obj;
}

// console.log(vowelCount("Elie")); // {e:2,i:1};
// console.log(vowelCount("Tim")); // {i:1};
// console.log(vowelCount("Matt")); // {a:1})
// console.log(vowelCount("hmmm")); // {};
// console.log(vowelCount("I Am awesome and so are you")); // {i: 1, a: 4, e: 3, o: 3, u: 1};

// –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach()` –≤–∏–≤–µ–¥–∏ –≤—Å—ñ name
// –∑ –æ–±'—î–∫—Ç–∞ employees –∫–∞–ø—Å–ª–æ–∫–æ–º.

// –ü–æ—Ç—ñ–º –≤–∏–≤–µ–¥–∏ —É –∫–æ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç–∞ –±—ñ–ª—å—à–µ 12000

// –ê –≤ –∫—ñ–Ω—Ü—ñ –ø—ñ–¥—Ä–∞—Ö—É–π —Å–∫—ñ–ª—å–∫–∏ –∫–æ–º–ø–∞–Ω—ñ—è –≤–∏–ø–ª–∞—á—É—î –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º,
// —Å–∫—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —î —É –∫–æ–º–ø–∞–Ω—ñ—ó —Ç–∞ –≤–∏–≤–µ–¥–∏ —ñ–º–µ–Ω–∞
// –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤,
// –¥–æ –ø—Ä–∏–∫–ª–∞–¥—É `Company pay 23000 for 2 employeers: Alex,Clark`

const employees = [
  {
    id: 101,
    name: "Alex",
    sal: 10000,
  },
  {
    id: 102,
    name: "Clark",
    sal: 13000,
  },
  {
    id: 103,
    name: "John",
    sal: 12000,
  },
  {
    id: 104,
    name: "Tony",
    sal: 20000,
  },
];
const each = (array) => {
  let totalSalary = 0;
  let totalEmployeers = array.length;
  let names = [];

  array.forEach(({ name }) => names.push(name.toUpperCase()));

  array.forEach(({ sal }) => (totalSalary += sal));

  console.log(
    `Company pay ${totalSalary} for ${totalEmployeers} employeers: ${names.join(
      ", "
    )}`
  );
};
each(employees);
